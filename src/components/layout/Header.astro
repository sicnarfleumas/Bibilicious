---

interface Props {
	currentLanguage?: 'en' | 'ja' | 'ta';
}

const { currentLanguage = 'en' } = Astro.props;

// Get the current path without language prefix
const currentPath = Astro.url.pathname;
const pathWithoutLang = currentPath.replace(/^\/(en|ja|ta)\//, '/');

// Check if we're on a specific blog post page
const isBlogPostPage = pathWithoutLang.match(/^\/blog\/[^/]+\/?$/);

// Create URLs for each language
const languageUrls: Record<string, string> = {
	en: isBlogPostPage ? '/blog' : pathWithoutLang,
	ja: isBlogPostPage ? '/ja/blog' : `/ja${pathWithoutLang}`,
	ta: isBlogPostPage ? '/ta/blog' : `/ta${pathWithoutLang}`
};

// Language display names
const languageNames: Record<string, string> = {
	en: 'English',
	ja: '日本語',
	ta: 'தமிழ்'
};

// Donate button text based on language
const donateText: Record<string, string> = {
	en: 'Donate',
	ja: '寄付する',
	ta: 'நன்கொடை'
};

// Determine active page
const isHomePage = pathWithoutLang === '/' || pathWithoutLang === '';
const isBlogPage = pathWithoutLang.startsWith('/blog');
const isContactPage = pathWithoutLang.startsWith('/contact');
---

<header>
	<div class="header-container">
		<a href={currentLanguage === 'en' ? '/' : `/${currentLanguage}/`} class="logo">
			Bibilicious
		</a>

		<nav>
			<div class="nav-links">
				<a 
					href={currentLanguage === 'en' ? '/blog' : `/${currentLanguage}/blog`} 
					class={isBlogPage ? 'active' : ''}
				>
					Blog
				</a>

				<a 
					href={currentLanguage === 'en' ? '/contact' : `/${currentLanguage}/contact`} 
					class={isContactPage ? 'active' : ''}
				>
					Contact
				</a>
			</div>

			<div class="header-right">
				<div class="language-dropdown">
					<button class="language-current">
						<span>{languageNames[currentLanguage]}</span>
						<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<polyline points="6 9 12 15 18 9"></polyline>
						</svg>
					</button>
					<div class="language-options">
						{Object.entries(languageNames).map(([code, name]) => (
							<a 
								href={languageUrls[code]} 
								class={`lang-option ${currentLanguage === code ? 'active' : ''}`}
								hreflang={code}
								lang={code}
							>
								{name}
							</a>
						))}
					</div>
				</div>

				<div class="donate-button">
					<a 
						href="https://www.buymeacoffee.com/bibilicious" 
						target="_blank"
						rel="noopener"
					>
						{donateText[currentLanguage]}
					</a>
				</div>
			</div>
		</nav>
		
		<button class="mobile-menu-toggle" aria-label="Toggle menu">
			<span class="bar"></span>
			<span class="bar"></span>
			<span class="bar"></span>
		</button>
	</div>
</header>

<script>
	// Mobile menu toggle functionality
	document.addEventListener('DOMContentLoaded', () => {
		const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
		const nav = document.querySelector('nav');
		const languageDropdown = document.querySelector('.language-current');
		const languageOptions = document.querySelector('.language-options');
		
		// Toggle mobile menu
		mobileMenuToggle?.addEventListener('click', () => {
			nav?.classList.toggle('open');
			mobileMenuToggle.classList.toggle('open');
		});
		
		// Toggle language dropdown
		languageDropdown?.addEventListener('click', (e) => {
			e.stopPropagation();
			languageOptions?.classList.toggle('show');
		});
		
		// Close dropdown when clicking outside
		document.addEventListener('click', () => {
			languageOptions?.classList.remove('show');
		});
		
		// Prevent closing when clicking inside dropdown
		languageOptions?.addEventListener('click', (e) => {
			e.stopPropagation();
		});
	});
</script>

<style>
	header {
		position: sticky;
		top: 0;
		z-index: 100;
		background-color: rgba(255, 255, 255, 0.9);
		backdrop-filter: blur(10px);
		-webkit-backdrop-filter: blur(10px);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
		padding: 0.75rem 0;
	}

	.header-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 2rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.logo {
		font-family: 'Playfair Display', serif;
		font-size: 1.75rem;
		font-weight: 700;
		color: #000 !important;
		text-decoration: none;
	}

	.logo:hover {
		color: #000 !important;
	}

	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
		flex-grow: 1;
		margin-left: 3rem;
	}

	.nav-links {
		display: flex;
		gap: 2rem;
	}

	.nav-links a {
		position: relative;
		font-size: 1rem;
		color: #333;
		text-decoration: none;
		padding: 0.5rem 0;
		transition: color 0.3s ease;
	}

	.nav-links a:hover {
		color: #FF6782;
	}

	.nav-links a::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 0;
		height: 2px;
		background-color: #FF6782;
		transition: width 0.3s ease;
	}

	.nav-links a:hover::after,
	.nav-links a.active::after {
		width: 100%;
	}

	.nav-links a.active {
		color: #FF6782;
		font-weight: 500;
	}

	.header-right {
		display: flex;
		align-items: center;
		gap: 1.5rem;
	}

	/* Language dropdown styles */
	.language-dropdown {
		position: relative;
	}

	.language-current {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.35rem 0.75rem;
		border-radius: 2rem;
		font-size: 0.85rem;
		color: #666;
		background: transparent;
		border: none;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.language-current:hover {
		background-color: #f0f0f0;
	}

	.language-options {
		position: absolute;
		top: 100%;
		right: 0;
		margin-top: 0.5rem;
		background: white;
		border-radius: 0.5rem;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		padding: 0.5rem;
		display: none;
		flex-direction: column;
		min-width: 120px;
		z-index: 10;
	}

	.language-options.show {
		display: flex;
	}

	.lang-option {
		padding: 0.5rem 0.75rem;
		text-decoration: none;
		color: #666;
		border-radius: 0.25rem;
		transition: all 0.2s ease;
	}

	.lang-option:hover {
		background-color: #f0f0f0;
	}

	.lang-option.active {
		background-color: #abffb0;
		color: #333;
		font-weight: 500;
	}

	/* Donate button styles */
	.donate-button {
		transform: scale(1.05);
	}

	.donate-button :global(a) {
		background-color: #FF6782;
		color: white;
		padding: 0.5rem 1rem;
		border-radius: 2rem;
		font-weight: 500;
		text-decoration: none;
		transition: all 0.3s ease;
		display: inline-block;
		box-shadow: 0 2px 8px rgba(255, 103, 130, 0.3);
	}

	.donate-button :global(a:hover) {
		background-color: #ff4d6b;
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(255, 103, 130, 0.4);
	}

	.mobile-menu-toggle {
		display: none;
		flex-direction: column;
		justify-content: space-between;
		width: 30px;
		height: 21px;
		background: transparent;
		border: none;
		cursor: pointer;
		padding: 0;
		z-index: 10;
	}

	.bar {
		height: 3px;
		width: 100%;
		background-color: #333;
		border-radius: 10px;
		transition: all 0.3s ease;
	}

	/* Mobile menu styles */
	@media screen and (max-width: 768px) {
		.header-container {
			padding: 0 1.5rem;
		}

		nav {
			position: fixed;
			top: 0;
			right: -100%;
			width: 80%;
			max-width: 300px;
			height: 100vh;
			background-color: white;
			flex-direction: column;
			justify-content: flex-start;
			padding: 5rem 2rem 2rem;
			box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
			transition: right 0.3s ease;
			margin-left: 0;
			z-index: 5;
		}

		nav.open {
			right: 0;
		}

		.nav-links {
			flex-direction: column;
			gap: 1.5rem;
			width: 100%;
		}

		.nav-links a {
			font-size: 1.2rem;
			width: 100%;
			display: block;
			padding: 0.5rem 0;
		}

		.header-right {
			flex-direction: column;
			align-items: flex-start;
			margin-top: 2rem;
			width: 100%;
			gap: 1.5rem;
		}

		.language-dropdown {
			width: 100%;
		}

		.language-current {
			width: 100%;
			justify-content: space-between;
			background-color: #f5f5f5;
		}

		.language-options {
			width: 100%;
			right: auto;
			left: 0;
		}

		.donate-button {
			width: 100%;
			transform: none;
		}

		.donate-button :global(a) {
			display: block;
			text-align: center;
			width: 100%;
		}

		.mobile-menu-toggle {
			display: flex;
		}

		.mobile-menu-toggle.open .bar:nth-child(1) {
			transform: translateY(9px) rotate(45deg);
		}

		.mobile-menu-toggle.open .bar:nth-child(2) {
			opacity: 0;
		}

		.mobile-menu-toggle.open .bar:nth-child(3) {
			transform: translateY(-9px) rotate(-45deg);
		}
	}

	/* Tablet adjustments */
	@media screen and (min-width: 769px) and (max-width: 1024px) {
		.header-container {
			padding: 0 1.5rem;
		}

		nav {
			margin-left: 2rem;
		}

		.nav-links {
			gap: 1.5rem;
		}
	}
</style>
