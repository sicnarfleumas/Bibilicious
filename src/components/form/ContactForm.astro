---
import GoogleForm from '../GoogleForm/GoogleForm';

interface Props {
    language?: 'en' | 'ja' | 'ta';
}

const { language = 'en' } = Astro.props;

// Translations for the contact form
const translations = {
    en: {
        title: "Let's make words dance ЁЯТГЁЯХ║",
        subtitle: "Get in Touch",
        description: "I'm pumped that you're thinking about diving into the awesome world of translations! Whether you've got a quirky document, a cool article, or just something super random that needs translating between Japanese, Tamil, and English, I'm here to make it happen."
    },
    ja: {
        title: "шиАшСЙуВТш╕КуВЙуБЫуБ╛уБЧуВЗуБЖ ЁЯТГЁЯХ║",
        subtitle: "уБКхХПуБДхРИуВПуБЫ",
        description: "ч┐╗ши│уБоч┤ацЩ┤уВЙуБЧуБДф╕ЦчХМуБлщгЫуБ│ш╛╝уВВуБЖуБиуБЧуБжуБДуВЛуБУуБиуБлшИИхеоуБЧуБжуБДуБ╛уБЩя╝БхдЙуВПуБгуБЯцЦЗцЫ╕уАБуВпуГ╝уГлуБкшиШф║ЛуАБуБ╛уБЯуБпцЧецЬмшкЮуАБуВ┐уГЯуГлшкЮуАБшЛ▒шкЮщЦУуБзч┐╗ши│уБМх┐ЕшжБуБкф╜ХуБЛш╢ЕуГйуГ│уГАуГауБкуВВуБоуБМуБВуБгуБжуВВуАБуБЭуВМуВТхоЯчП╛уБЩуВЛуБЯуВБуБлуБУуБУуБлуБДуБ╛уБЩуАВ"
    },
    ta: {
        title: "ро╡ро╛ро░рпНродрпНродрпИроХро│рпИ роироЯройрооро╛роЯ ро╡рпИрокрпНрокрпЛроорпН ЁЯТГЁЯХ║",
        subtitle: "родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН",
        description: "роирпАроЩрпНроХро│рпН роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБроХро│ро┐ройрпН роЕро▒рпНрокрпБродрооро╛рой роЙро▓роХродрпНродро┐ро▓рпН роорпВро┤рпНроХрпБро╡родрпИрокрпН рокро▒рпНро▒ро┐ ропрпЛроЪро┐рокрпНрокродрпБ роОройроХрпНроХрпБ роЙро▒рпНроЪро╛роХрооро│ро┐роХрпНроХро┐ро▒родрпБ! роЙроЩрпНроХро│ро┐роЯроорпН роТро░рпБ ро╡ро┐родрпНродро┐ропро╛роЪрооро╛рой роЖро╡рогроорпН, роТро░рпБ роЕро░рпБроорпИропро╛рой роХроЯрпНроЯрпБро░рпИ роЕро▓рпНро▓родрпБ роЬрокрпНрокро╛ройро┐роп, родрооро┐ро┤рпН рооро▒рпНро▒рпБроорпН роЖроЩрпНроХро┐ро▓роорпН роЗроЯрпИропрпЗ роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХ ро╡рпЗрогрпНроЯро┐роп роПродро╛ро╡родрпБ роЗро░рпБроирпНродро╛ро▓рпН, роЕродрпИ роиро┐роХро┤рпНродрпНрод роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН."
    }
};

const t = translations[language];
---

<section class="bento-contact">
    <div class="contact-text box">
        <h1>{t.title}</h1>
        <h2>{t.subtitle}</h2>
        <p>{t.description}</p>
    </div>
    
    <div class="contact-form box">
        <GoogleForm client:load />
    </div>
</section>

<style>
    .bento-contact {
        padding: 3% 0 5%;
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        grid-auto-rows: auto;
        grid-gap: 1.5rem;
        max-width: 1200px;
        width: 85%;
        margin: 0 auto;
    }
    
    .box {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
        padding: 2.5rem;
        border-radius: 1rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
    }
    
    .box::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-size: 20px 20px;
        opacity: 0.05;
        z-index: 0;
        pointer-events: none;
    }
    
    .box > * {
        position: relative;
        z-index: 1;
    }
    
    .contact-text {
        background-color: #fff; /* Sakura pink/peach */
        grid-column: span 5;
        background-image: radial-gradient(circle at 10% 20%, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0) 90%);
    }
    
    .contact-form {
        background-color: #D4EEFF; /* Sky blue */
        grid-column: span 7;
        background-image: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0.2) 75%, transparent 75%, transparent);
        background-size: 20px 20px;
    }
    
    h1 {
        font-size: 2rem;
        font-weight: 700;
        line-height: 1.3;
        color: #333;
        position: relative;
        display: inline-block;
    }
    
    h2 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #4D4D4D;
    }
    
    p {
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.8;
        color: #4D4D4D;
    }
    
    /* Improved Hover Animations */
    .box {
        transition: transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275), 
                    box-shadow 0.4s ease,
                    filter 0.4s ease;
    }
    
    .box:hover {
        transform: translateY(-5px) scale(1.02);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        z-index: 2;
    }
    
    .bento-contact:hover .box:not(:hover) {
        filter: brightness(0.95);
        transform: scale(0.98);
    }
    
    /* Better Responsive Design */
    @media screen and (max-width: 1200px) {
        .bento-contact {
            width: 90%;
            grid-gap: 1.25rem;
        }
        
        .box {
            padding: 2rem;
        }
    }
    
    @media screen and (max-width: 1024px) {
        .bento-contact {
            grid-template-columns: repeat(12, 1fr);
            width: 90%;
        }
        
        .contact-text, .contact-form {
            grid-column: span 12;
        }
        
        .bento-contact:hover .box:not(:hover) {
            filter: none;
            transform: none;
        }
    }
    
    @media screen and (max-width: 768px) {
        .bento-contact {
            width: 95%;
            grid-gap: 1rem;
        }
        
        .box {
            padding: 1.75rem;
        }
    }
    
    @media screen and (max-width: 480px) {
        .bento-contact {
            width: 100%;
            padding: 3% 5%;
            grid-gap: 0.75rem;
        }
        
        .box {
            padding: 1.5rem;
        }
        
        h1 {
            font-size: 1.6rem;
        }
        
        h2 {
            font-size: 1.3rem;
        }
        
        p {
            font-size: 0.95rem;
            line-height: 1.6;
        }
    }
</style>

<script>
    // Add subtle animation to boxes on scroll with staggered delays
    document.addEventListener('DOMContentLoaded', () => {
        const boxes = document.querySelectorAll('.box');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const element = entry.target as HTMLElement;
                    // Get the index of the element to create staggered animation
                    const index = Array.from(boxes).indexOf(entry.target);
                    const delay = index * 100; // 100ms delay between each element
                    
                    setTimeout(() => {
                        element.style.opacity = '1';
                        element.style.transform = 'translateY(0)';
                    }, delay);
                }
            });
        }, { threshold: 0.1 });
        
        boxes.forEach(box => {
            const element = box as HTMLElement;
            element.style.opacity = '0';
            element.style.transform = 'translateY(20px)';
            element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observer.observe(box);
        });
    });
</script> 